// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAndAccommodationBookingPlatform.Db;

#nullable disable

namespace TravelAndAccommodationBookingPlatform.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231208141111_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelAmenity", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("HotelAmenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ImageId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("AdultCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.RoomImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            PasswordHash = "$2a$10$zwr3fuiVExH8Kzy1I/sDce5FdI8wpDnKSdR0R1WTNbhAMOhdJP4Zi",
                            Role = "RegularUser",
                            Username = "User2"
                        },
                        new
                        {
                            UserId = 3,
                            PasswordHash = "$2a$10$f4usmcGNDPBJp/lt1.VUfOGerUx/.szx0DS/3cMLp4XF2B1p23/KO",
                            Role = "RegularUser",
                            Username = "User3"
                        },
                        new
                        {
                            UserId = 4,
                            PasswordHash = "$2a$10$MQKZdgzdDQgVqRuG1dckxO4VnGOHVx5H6hHaKtygAO1eUMbfLKHtO",
                            Role = "RegularUser",
                            Username = "User4"
                        },
                        new
                        {
                            UserId = 5,
                            PasswordHash = "$2a$10$taTjZrx9Ti3KJLS0LiDi4usZiBDzPh8itMXRY6ssyMupG96Xz5Cqq",
                            Role = "RegularUser",
                            Username = "User5"
                        },
                        new
                        {
                            UserId = 6,
                            PasswordHash = "$2a$10$CyQQOTcZUZlp.N00FWMXhOoNGW0Dpm2ANX/wCTYYEIOCGjJpHqjVa",
                            Role = "RegularUser",
                            Username = "User6"
                        },
                        new
                        {
                            UserId = 7,
                            PasswordHash = "$2a$10$D10Edid6MPbYQXnhskK85.LR0eiIWxS0cHBEHpijFKCoVA66jVA0S",
                            Role = "RegularUser",
                            Username = "User7"
                        },
                        new
                        {
                            UserId = 8,
                            PasswordHash = "$2a$10$vzhB79SF9VD0RzdBCQq9J.5TxKyqUJ1EF76TMcpSQqsb17lPjUzVG",
                            Role = "RegularUser",
                            Username = "User8"
                        },
                        new
                        {
                            UserId = 9,
                            PasswordHash = "$2a$10$0veNSF4j3dgb5joi/qShE.WhleAb7rzWQUuy.gzwSMxnFEcJlnKAa",
                            Role = "RegularUser",
                            Username = "User9"
                        },
                        new
                        {
                            UserId = 10,
                            PasswordHash = "$2a$10$CONaoWvkpxa6mimVWMTvFeW64xNEqksFYjqoH/bfW1Yojg.AcugSa",
                            Role = "RegularUser",
                            Username = "User10"
                        },
                        new
                        {
                            UserId = 11,
                            PasswordHash = "$2a$10$q/f7xNRWj4fD9yINGuRkg.IWBFw7SU4oQMCo/OlBsf6nx7hy6xzoK",
                            Role = "RegularUser",
                            Username = "User11"
                        },
                        new
                        {
                            UserId = 12,
                            PasswordHash = "$2a$10$oU60qReLaYrrbx2wGtsV9eeQSWHz9oHJKc9VyHsRY8.hDS4Xlaw2e",
                            Role = "RegularUser",
                            Username = "User12"
                        },
                        new
                        {
                            UserId = 13,
                            PasswordHash = "$2a$10$QdLLosxo0ohK0HTtegpLfeSaHxInVIn/LKqfF3s3WMdbwj0LCO1u2",
                            Role = "RegularUser",
                            Username = "User13"
                        },
                        new
                        {
                            UserId = 14,
                            PasswordHash = "$2a$10$n8CbgB.jS8fHV2hDBN/W6.wWYRyEGemAMDCuqf/V7.UajJybp2DIi",
                            Role = "RegularUser",
                            Username = "User14"
                        },
                        new
                        {
                            UserId = 15,
                            PasswordHash = "$2a$10$NWPqX4dLaad5BKzCUUPRkeKX6xVT68w8diqhKVBl2OjOB.zJe4WYi",
                            Role = "RegularUser",
                            Username = "User15"
                        },
                        new
                        {
                            UserId = 16,
                            PasswordHash = "$2a$10$KUzNGcX2kDgYbQ0cLjrm0OKWxsm6xwYJyHR5CzWoZ5hjdgqJ2xH7O",
                            Role = "RegularUser",
                            Username = "User16"
                        },
                        new
                        {
                            UserId = 17,
                            PasswordHash = "$2a$10$cZ/RepVh/JACB/WC.K/rrO.Meaap3Ut88.kcn9dS3kdxR4FY83O5e",
                            Role = "RegularUser",
                            Username = "User17"
                        },
                        new
                        {
                            UserId = 18,
                            PasswordHash = "$2a$10$Mk3GBDCb9rwiPglrxLSxvet120DrEjCswdkCE/bg/1ri1OSdWbe06",
                            Role = "RegularUser",
                            Username = "User18"
                        },
                        new
                        {
                            UserId = 19,
                            PasswordHash = "$2a$10$cZ/H1POlRvxXQzzn.QvQxOAS.nFTS3ys0irMUsFclZADcNuJW4UUy",
                            Role = "RegularUser",
                            Username = "User19"
                        },
                        new
                        {
                            UserId = 20,
                            PasswordHash = "$2a$10$yIzM5YWeA/njcNnKFA6g7.IQA1x5X.lq5GXJuwTdlzkUBv3Al4fAu",
                            Role = "RegularUser",
                            Username = "User20"
                        },
                        new
                        {
                            UserId = 1,
                            PasswordHash = "$2a$10$4BWLqbBdjU5AUrz9hWSlP.DFNA41eyP5rJGTXuZY9nxQpX6m0y4RW",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Booking", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelAmenity", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", "Amenity")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelImage", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.RoomImage", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Review", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", b =>
                {
                    b.Navigation("HotelAmenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.Navigation("HotelAmenities");

                    b.Navigation("HotelImages");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
