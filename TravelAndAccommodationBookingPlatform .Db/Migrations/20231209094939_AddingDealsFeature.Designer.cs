// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAndAccommodationBookingPlatform.Db;

#nullable disable

namespace TravelAndAccommodationBookingPlatform.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231209094939_AddingDealsFeature")]
    partial class AddingDealsFeature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelAmenity", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("HotelAmenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ImageId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("AdultCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DealEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.RoomImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            PasswordHash = "$2a$10$zffEKuRc.XvHmFch/hXEs.Yd2y/Wa.qew7XPnRLMMrElpNaDQoxhW",
                            Role = "RegularUser",
                            Username = "User2"
                        },
                        new
                        {
                            UserId = 3,
                            PasswordHash = "$2a$10$DKUdu/3jKMi5Smd6y004R.xA2g/XTgZotBaHFSMlWUJZHQngrBm4e",
                            Role = "RegularUser",
                            Username = "User3"
                        },
                        new
                        {
                            UserId = 4,
                            PasswordHash = "$2a$10$qYSZZvdJRokzJ6s4uXN1VOqYGBNoAjThp7uCDk.Y0sCscKPmCS0sq",
                            Role = "RegularUser",
                            Username = "User4"
                        },
                        new
                        {
                            UserId = 5,
                            PasswordHash = "$2a$10$WqtTU4HEY1Z4LYB/L.AS.OvD00v.MqDMojIIHQXWbCGN/NyMEmd7S",
                            Role = "RegularUser",
                            Username = "User5"
                        },
                        new
                        {
                            UserId = 6,
                            PasswordHash = "$2a$10$BGFfR5vquIo1jGkcziYEkOBiYgtwPv.o/y6GdkpWjTBKNi2r5e3.a",
                            Role = "RegularUser",
                            Username = "User6"
                        },
                        new
                        {
                            UserId = 7,
                            PasswordHash = "$2a$10$4.K7pBQPZdlmDCOr.JozuuM.rRO801LgLHmMOzDjhPpW1g4kdRMg.",
                            Role = "RegularUser",
                            Username = "User7"
                        },
                        new
                        {
                            UserId = 8,
                            PasswordHash = "$2a$10$eo4/dGeXUPmoT2/llA1gXeeUTEvglc/YC4RQ5eCrd8vR8X7pXan82",
                            Role = "RegularUser",
                            Username = "User8"
                        },
                        new
                        {
                            UserId = 9,
                            PasswordHash = "$2a$10$gUhIw1iVVmy5Vytj3fmmKeSZYGSEa4nY1uuVFjIbMYLAUbXx3lQxi",
                            Role = "RegularUser",
                            Username = "User9"
                        },
                        new
                        {
                            UserId = 10,
                            PasswordHash = "$2a$10$sKCUgEgPDrI9V2ZkHY5v8.nusRHOQMQodUxyklqEB.5tcHwfzmS3K",
                            Role = "RegularUser",
                            Username = "User10"
                        },
                        new
                        {
                            UserId = 11,
                            PasswordHash = "$2a$10$yBdOe4.Yl/ls55.st6Zb9u0sSDwBfJNz5A5oBmaROU2xkxon1PcNG",
                            Role = "RegularUser",
                            Username = "User11"
                        },
                        new
                        {
                            UserId = 12,
                            PasswordHash = "$2a$10$S.Lj849F91fx9j4traSwd.YaUCM1AwZIorejTFVOXzDfeDM8zmyba",
                            Role = "RegularUser",
                            Username = "User12"
                        },
                        new
                        {
                            UserId = 13,
                            PasswordHash = "$2a$10$YazNnsERtgO6rf4bZXxRVeRNbFsBaAYN.nSTSaEIUK0a8vyQWju8m",
                            Role = "RegularUser",
                            Username = "User13"
                        },
                        new
                        {
                            UserId = 14,
                            PasswordHash = "$2a$10$1gN/hTnBjmrxLvngBXQNa.frVaoJ5orEWwlFSG1YJtBtVheLf5P8i",
                            Role = "RegularUser",
                            Username = "User14"
                        },
                        new
                        {
                            UserId = 15,
                            PasswordHash = "$2a$10$DR7gOraGt0qQ4c0RA0oC2OZCH991qxPWpxudmfr5/Loz7D42c0TVi",
                            Role = "RegularUser",
                            Username = "User15"
                        },
                        new
                        {
                            UserId = 16,
                            PasswordHash = "$2a$10$jE7MJgP23lnPfeFscQYgCOB.k7dT5j5SBvFfxcN5hlwe7VIGjgLfO",
                            Role = "RegularUser",
                            Username = "User16"
                        },
                        new
                        {
                            UserId = 17,
                            PasswordHash = "$2a$10$cqUWIkooHazRVyHN9OD20OVWjJOMoYCLwMUtlNVNFAqk6QF//ZPOu",
                            Role = "RegularUser",
                            Username = "User17"
                        },
                        new
                        {
                            UserId = 18,
                            PasswordHash = "$2a$10$5ObsX2LZ3jfuy2r3fyF6P.cT5Je92h/1bWydM6EuUZbNi3gATo4vu",
                            Role = "RegularUser",
                            Username = "User18"
                        },
                        new
                        {
                            UserId = 19,
                            PasswordHash = "$2a$10$xobcuFCjfQ.goAoKBQQJhuQu97xBORlDN2bnUWjL.mazp9FIIwF4O",
                            Role = "RegularUser",
                            Username = "User19"
                        },
                        new
                        {
                            UserId = 20,
                            PasswordHash = "$2a$10$GyEpgg0Wf1WgWBwBjtQdvebsZLvTFPtb4LCowe4CcEoPW1sbQ72ay",
                            Role = "RegularUser",
                            Username = "User20"
                        },
                        new
                        {
                            UserId = 1,
                            PasswordHash = "$2a$10$g5vCvlFOTZAvO5bJg9QeSutmlgzYZ5ql5OtoBfzMpCu52.CiBMgJ.",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Booking", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelAmenity", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", "Amenity")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.HotelImage", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Review", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.RoomImage", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Db.Entities.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Amenity", b =>
                {
                    b.Navigation("HotelAmenities");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Hotel", b =>
                {
                    b.Navigation("HotelAmenities");

                    b.Navigation("HotelImages");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Db.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
